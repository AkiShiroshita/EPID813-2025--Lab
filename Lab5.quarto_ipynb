{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Lab 5\"\n",
        "webr:  \n",
        "  show-startup-message: true    # Display status of webR initialization\n",
        "  packages: ['data.table', 'tidyverse', 'ggplot2', 'speedglm'] # Pre-install dependency\n",
        "editor_options: \n",
        "  chunk_output_type: console\n",
        "---\n",
        "\n",
        "Lab 5 covers \n",
        "\n",
        "* **Propensity score analysis** \n",
        "\n",
        "```{webr}\n",
        "library(tidyverse)\n",
        "diabetes <- read.csv('https://raw.githubusercontent.com/AkiShiroshita/EPID813-2025--Lab/refs/heads/main/data/diabetes.csv')\n",
        "\n",
        "diabetes_clean <- diabetes %>%\n",
        "  # Ensure correct variable types\n",
        "  mutate_if(is.integer, as.numeric) %>%\n",
        "  # Create exposure and outcome variables\n",
        "  mutate(\n",
        "    diab = factor(if_else(glyhb >= 6.5, 1, 0), labels = c(\"No Diabetes\", \"Diabetes\")),\n",
        "    htn = factor(if_else(bp.1s > 130, 1, 0), labels = c(\"No HTN\", \"HTN\"))\n",
        "  ) %>%\n",
        "  # Select variables for analysis\n",
        "  dplyr::select(htn, diab, age, height, weight, frame, hdl) %>%\n",
        "  # Remove rows with any missing data\n",
        "  drop_na()\n",
        "```\n",
        "\n",
        "* Very simplified workflow\n",
        "\n",
        "1. Estimate the propensity score\n",
        "\n",
        "$Pr(Tr=1|Covariates)$\n",
        "\n",
        "```{webr}\n",
        "# Model the propensity score\n",
        "ps_model <- glm(diab ~ age + height + weight + hdl,\n",
        "                data = diabetes_clean, family = binomial)\n",
        "\n",
        "# Add the propensity score to our dataframe\n",
        "diabetes_ps <- diabetes_clean %>%\n",
        "  mutate(ps_score = predict(ps_model, type = \"response\"))\n",
        "```\n",
        "\n",
        "2. Use the propensity score: weighting, matching, stratification, etc.\n",
        "\n",
        "Inverse probability weighting (ATE)\n",
        "\n",
        "* Among treated: $W = 1/PS$\n",
        "\n",
        "* Among untreated: $W = 1/(1-PS)$\n",
        "\n",
        "```{webr}\n",
        "diabetes_ps <- diabetes_ps %>%\n",
        "  mutate(ipw = if_else(diab == \"Diabetes\", 1/ps_score, 1/(1 - ps_score)))\n",
        "```\n",
        "\n",
        "3. Balance check\n",
        "\n",
        "Love plot, histogram, etc.\n",
        "\n",
        "Ensure that the weighted standardized mean difference for each covariate is less than 0.1 (or, if acceptable, less than 0.25).\n",
        "\n",
        "* Unweighted samples\n",
        "\n",
        "Continuous variables: $d=100*\\frac{\\bar{x}_{treatment}-\\bar{x}_{control}}{\\sqrt{\\frac{S^2_{treatment}+S^2_{control}}{2}}}$\n",
        "\n",
        "Binary variables: $d=100*\\frac{\\hat{p}_{treatment}-\\hat{p}_{control}}{\\sqrt{\\frac{\\hat{p}_{treatment}(1-\\hat{p}_{treatment})+\\hat{p}_{control}(1-\\hat{p}_{control})}{2}}}$\n",
        "\n",
        "* Weighted samples\n",
        "\n",
        "$\\bar{x}_{weight}=\\frac{\\sum w_i x_i}{\\sum w_i}$\n",
        "\n",
        "$s^2_{weight}=\\frac{\\sum w_i}{(\\sum w_i)^2-\\sum w_i^2} \\sum w_i (x_i-\\bar{x}_{weight})^2$\n",
        "\n",
        "```{webr}\n",
        "weighted_var <- function(x, w, na.rm = TRUE) {\n",
        "  sum_w <- sum(w)\n",
        "  sum_w2 <- sum(w^2)\n",
        "  mean_w <- sum(x * w) / sum_w\n",
        "  var_w <- sum(w * (x - mean_w)^2) / (sum_w - (sum_w2 / sum_w))\n",
        "  return(var_w)\n",
        "} \n",
        "\n",
        "calculate_smd <- function(data, treatment_var, covariates, weights_var = NULL) {\n",
        "  is_weighted <- !is.null(weights_var)\n",
        "  data$..treatment.. <- factor(data[[treatment_var]])\n",
        "  \n",
        "  treat_level <- levels(data$..treatment..)[2]\n",
        "  control_level <- levels(data$..treatment..)[1]\n",
        "  \n",
        "  treat_data <- data[data$..treatment.. == treat_level, ]\n",
        "  control_data <- data[data$..treatment.. == control_level, ]\n",
        "  \n",
        "  smd_list <- list()\n",
        "  for (cov in covariates) {\n",
        "    var_t <- treat_data[[cov]]; var_c <- control_data[[cov]]\n",
        "    w_t <- if (is_weighted) treat_data[[weights_var]] else rep(1, nrow(treat_data))\n",
        "    w_c <- if (is_weighted) control_data[[weights_var]] else rep(1, nrow(control_data))\n",
        "    is_binary <- length(unique(na.omit(data[[cov]]))) == 2\n",
        "    \n",
        "    if (is_binary) {\n",
        "      mean_t <- weighted.mean(var_t, w_t, na.rm = TRUE); mean_c <- weighted.mean(var_c, w_c, na.rm = TRUE)\n",
        "      var_t_stat <- mean_t * (1 - mean_t); var_c_stat <- mean_c * (1 - mean_c)\n",
        "    } else {\n",
        "      mean_t <- weighted.mean(var_t, w_t, na.rm = TRUE); mean_c <- weighted.mean(var_c, w_c, na.rm = TRUE)\n",
        "      var_t_stat <- if (is_weighted) weighted_var(var_t, w_t) else var(var_t, na.rm = TRUE)\n",
        "      var_c_stat <- if (is_weighted) weighted_var(var_c, w_c) else var(var_c, na.rm = TRUE)\n",
        "    }\n",
        "    \n",
        "    mean_diff <- mean_t - mean_c\n",
        "    pooled_sd <- sqrt((var_t_stat + var_c_stat) / 2)\n",
        "    smd <- if (pooled_sd > 0) abs(mean_diff / pooled_sd) else 0\n",
        "    smd_list[[cov]] <- smd\n",
        "  }\n",
        "  \n",
        "  output_df <- data.frame(Covariate = names(smd_list), SMD = as.numeric(smd_list), row.names = NULL)\n",
        "  return(output_df)\n",
        "}\n",
        "\n",
        "covariates <- c(\"age\", \"height\", \"weight\", \"hdl\")\n",
        "treatment_var <- \"diab\"\n",
        "\n",
        "# 1. Calculate Unweighted SMDs\n",
        "unweighted_smds <- calculate_smd(\n",
        "  data = diabetes_ps,\n",
        "  treatment_var = treatment_var,\n",
        "  covariates = covariates\n",
        ") %>%\n",
        "  dplyr::mutate(Type = \"Unweighted\")\n",
        "\n",
        "# 2. Calculate Weighted SMDs\n",
        "weighted_smds <- calculate_smd(\n",
        "  data = diabetes_ps,\n",
        "  treatment_var = treatment_var,\n",
        "  covariates = covariates,\n",
        "  weights_var = \"ipw\" \n",
        ") %>%\n",
        "  dplyr::mutate(Type = \"Weighted\")\n",
        "\n",
        "love_data <- dplyr::bind_rows(unweighted_smds, weighted_smds)\n",
        "love_data$Type <- factor(love_data$Type, levels = c(\"Unweighted\", \"Weighted\"))\n",
        "\n",
        "ggplot(data = love_data, aes(x = SMD, y = Covariate, group = Covariate)) +\n",
        "  geom_point(aes(color = Type), size = 3) +\n",
        "  geom_vline(xintercept = 0.1, linetype = \"dashed\", color = \"red\") +\n",
        "  labs(\n",
        "    title = \"Covariate Balance Before and After Weighting\",\n",
        "    x = \"Absolute Standardized Mean Difference\",\n",
        "    y = \"Covariate\",\n",
        "    color = \"Sample\"\n",
        "  ) +\n",
        "  scale_color_manual(values = c(\"Unweighted\" = \"grey\", \"Weighted\" = \"navy\")) +\n",
        "  theme_minimal(base_size = 14) +\n",
        "  theme(legend.position = \"top\")\n",
        "```\n",
        "\n",
        "\n",
        "4. Run the outcome analysis\n",
        "\n",
        "```{webr}\n",
        "# Outcome analysis\n",
        "fit <- glm(htn ~ diab, data = diabetes_ps, weights = ipw, family = binomial())\n",
        "summary(fit)\n",
        "```\n",
        "\n",
        "We will elaborate on this workflow in Lab 5.\n",
        "\n",
        ":::callout-note\n",
        "Consider uncertainty of propensity score estimation!\n",
        "$\\rightarrow$ Use robust standard error or bootstrap confidence interval\n",
        ":::"
      ],
      "id": "c54e88e3"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\shiroa1\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}