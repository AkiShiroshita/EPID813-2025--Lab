{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Lab 2\"\n",
        "webr:  \n",
        "  show-startup-message: true    # Display status of webR initialization\n",
        "  packages: ['data.table', 'tidyverse', 'ggplot2', 'speedglm'] # Pre-install dependency\n",
        "editor_options: \n",
        "  chunk_output_type: console\n",
        "---\n",
        "\n",
        "\n",
        "Lab 2 covers \n",
        "\n",
        "* **data wrangling** \n",
        "\n",
        "* **regression models**.\n",
        "\n",
        "# Data wrangling\n",
        "\n",
        "* `base R`\n",
        "\n",
        "* `tidyverse`: clean and readable \n",
        "\n",
        "* `data.table`: Optimized for speed and memory efficiency\n",
        "\n",
        ":::callout-note\n",
        "As I use very large-scale environmental data, I am switching from `tidyverse` to `data.table`.\n",
        ":::\n",
        "\n",
        "# `tidyverse`\n",
        "\n",
        "A philosophy created by Hadley Wickham\n",
        "\n",
        "* `dplyr` → data manipulation (filter, mutate, group, summarize)\n",
        "\n",
        "* `ggplot2` → data visualization\n",
        "\n",
        "* `tidyr` → data tidying (reshaping, pivoting, separating)\n",
        "\n",
        "* `readr` → data import (CSV, TSV, etc.)\n",
        "\n",
        "* `tibble` → modern data frames (better printing, easier handling)\n",
        "\n",
        "* `purrr` → functional programming with lists (map, reduce)\n",
        "\n",
        "* `stringr` → string handling\n",
        "\n",
        "* `forcats` → categorical (factor) variables handling\n",
        "\n",
        ":::callout-note\n",
        "The pipe function (takes the result of the expression on its left and \"pipes\" it into the function on its right) `%>%` makes the workflow read like a sequence of steps.\n",
        ":::\n",
        "\n",
        "Demonstrations\n",
        "\n",
        "\n",
        "```{webr}\n",
        "library(tidyverse)\n",
        "prostate <- read.csv('https://raw.githubusercontent.com/AkiShiroshita/EPID813-2025--Lab/refs/heads/main/data/prostate.csv')\n",
        "```\n",
        "\n",
        "\n",
        "# My tips and tricks\n",
        "\n",
        "* For moderate-sized datasets, I recommend using `tidyverse` for its readability.\n",
        "\n",
        "* Memorize the basic commands for descriptive analyses.\n",
        "\n",
        "* Check the unique values and summaries of each column (e.g., `unique()`, `summary()`)\n",
        "\n",
        "* Check a lot of contingency tables (e.g., `table()`)\n",
        "\n",
        "* Visualize the variables as needed (e.g., `ggplot()`)\n",
        "\n",
        "# `data.table` (advanced)\n",
        "\n",
        "\n",
        "```{=html}\n",
        "<div  style=\" margin-left: auto; margin-right: auto;display: block; text-align:center; width:fit-content;\"> \n",
        "<p style=\"font-size:200%;font-weight:bold\" >\n",
        "<code>DT[<span class=\"rows\">i</span>, <span class=\"columns\">j</span>, <span class=\"by\">by</span>]</code>\n",
        "</p>\n",
        "</div>\n",
        "```\n",
        "\n",
        "\n",
        "Where <code>**DT**</code> is a data.table object, the <code class=\"rows\">[**i**]{.rows}</code> argument is used for filtering and joining, the <code class=\"columns\">[**j**]{.columns}</code> argument is used for summarizing and transforming, and the <code class=\"by\">[**by**]{.by}</code> argument defines the groups to which to apply these operations.\n",
        "\n",
        "\n",
        "```{webr}\n",
        "library(data.table)\n",
        "prostate <- fread('https://raw.githubusercontent.com/AkiShiroshita/EPID813-2025--Lab/refs/heads/main/data/prostate.csv')\n",
        "```\n",
        "\n",
        "\n",
        "* Convert objects to `data.table`: \n",
        "\n",
        "`setDT()` vs. `as.data.table()`\n",
        "\n",
        "`setDT()`: Converts in place\n",
        "\n",
        "`as.data.table()`: Creates a new `data.table` object\n",
        "\n",
        "* Filter rows\n",
        "\n",
        "\n",
        "```{webr}\n",
        "prostate[rx == \"0.2 mg estrogen\"]\n",
        "```\n",
        "\n",
        "\n",
        "* Change data type\n",
        "\n",
        "`Modify-in-place`\n",
        "\n",
        "\n",
        "```{webr}\n",
        "prostate[, age := as.numeric(age)]\n",
        "```\n",
        "\n",
        "```{webr}\n",
        "# Identify columns that are of type integer.\n",
        "int_cols <- names(prostate)[sapply(prostate, is.integer)]\n",
        "\n",
        "# Update these columns to numeric type using the := operator.\n",
        "# The '(int_cols)' syntax allows us to use a character vector of column names.\n",
        "prostate[, (int_cols) := lapply(.SD, as.numeric), .SDcols = int_cols]\n",
        "```\n",
        "\n",
        "\n",
        "* Make new columns\n",
        "\n",
        "`Modify-in-place`\n",
        "\n",
        "\n",
        "```{webr}\n",
        "prostate2 <- copy(prostate)\n",
        "prostate2[, `:=`(\n",
        "  estrogen     = fifelse(rx != \"placebo\", 1, 0),\n",
        "  dead         = fifelse(status != \"alive\", 1, 0),\n",
        "  abnormal_ekg = fifelse(ekg != \"normal\", 1, 0)\n",
        ")]\n",
        "```\n",
        "\n",
        "\n",
        "* Summarize by group\n",
        "\n",
        "\n",
        "```{webr}\n",
        "prostate2[, mean(age, na.rm=TRUE), by = rx]\n",
        "```\n",
        "\n",
        "```{webr}\n",
        "prostate2[rx == \"0.2 mg estrogen\", mean(age, na.rm=TRUE)]\n",
        "```\n",
        "\n",
        "```{webr}\n",
        "person_time_summary <- prostate2[, .(\n",
        "  events = sum(dead),\n",
        "  person_time = sum(dtime)\n",
        "), by = .(estrogen)]\n",
        "```\n",
        "\n",
        "\n",
        "* Piping\n",
        "\n",
        "It takes the result of the expression on its left and \"pipes\" it into the function on its right.\n",
        "\n",
        "After R 4.3.0, the native pipe supports a `_` placeholder to the right-hand side of the pipe.\n",
        "\n",
        "\n",
        "```{webr}\n",
        "prostate2[rx == \"0.2 mg estrogen\"] |> \n",
        "  _[, .(mean_age = mean(age, na.rm=TRUE),\n",
        "        mean_wt = mean(wt, na.rm=TRUE)),\n",
        "    by = rx]\n",
        "```\n",
        "\n",
        "\n",
        "# Poisson regression\n",
        "\n",
        "* Conventional Poisson regression \n",
        "\n",
        "For count data\n",
        "\n",
        "$log(E[Y_i|X_i])=\\beta_0+\\beta_1X_i+log(T_i)$\n",
        "\n",
        "Effect measure: rate ratio\n",
        "\n",
        "* Modified Poisson regression\n",
        "\n",
        "For binary data\n",
        "\n",
        "$log(E[Y_i|X_i])=\\beta_0+\\beta_1X_i$\n",
        "\n",
        "Effect measure: risk ratio\n",
        "\n",
        ":::callout-note\n",
        "Robust standard errors are recommended in both the conventional Poisson and the modified Poisson regression models.\n",
        ":::\n",
        "\n",
        "# Regression models (advanced)\n",
        "\n",
        "`speedglm` package: more speedy than `glm`\n",
        "\n",
        "It directly solves the normal equations of the weighted least squares problem at each iteration (rather than relies on a QR decomposition).\n",
        "\n",
        "Why does this important? \n",
        "\n",
        "$\\rightarrow$ In G-methods, you often create many derived variables and fit many regression models across \"copied\" datasets.\n",
        "\n",
        "\n",
        "```{webr}\n",
        "library(speedglm)\n",
        "model <- speedglm(dead ~ estrogen + sbp + dbp + age + hx, data = prostate2, family = binomial())\n",
        "summary(model)\n",
        "```"
      ],
      "id": "17d282ee"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\akihi\\miniconda3\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}